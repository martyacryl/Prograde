// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Hashed password with bcrypt
  role      Role     @default(HEAD_COACH)
  teamId    String?
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team      Team?    @relation(fields: [teamId], references: [id])
  
  // Position-specific relations
  positionConfigurations PositionConfiguration[]
  
  // Grading relations
  playGrades PlayGrade[]
  reports    Report[]
  
  // Live game relations
  livePlayGrades LivePlay[]
  
  @@index([teamId])
  @@index([email])
}

enum Role {
  HEAD_COACH
  COORDINATOR
  ANALYST
  SCOUT
}

model Player {
  id          String   @id @default(cuid())
  teamId      String
  seasonId    String
  jerseyNumber String
  firstName   String
  lastName    String
  position    String   // "LT", "LG", "C", "RG", "RT", "QB", "RB", etc.
  year        String?  // "FR", "SO", "JR", "SR", "GR"
  height      String?  // "6'4\""
  weight      Int?     // Weight in pounds
  hometown    String?  // "Detroit, MI"
  headshotUrl String?  // URL to player headshot image
  headshotLocalPath String? // Local path for cached headshot
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team        Team     @relation(fields: [teamId], references: [id])
  season      Season   @relation(fields: [seasonId], references: [id])
  
  // Grading relations
  playGrades  PlayPositionGrade[]
  gameRosters GameRoster[]
  
  @@unique([teamId, seasonId, jerseyNumber])
  @@index([teamId, seasonId, position])
  @@index([teamId, seasonId, isActive])
  @@index([seasonId])
}

model GameRoster {
  id          String   @id @default(cuid())
  gameId      String
  teamId      String
  playerId    String
  position    String   // Starting position for this game
  isStarter   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  game        Game     @relation(fields: [gameId], references: [id])
  team        Team     @relation(fields: [teamId], references: [id])
  player      Player   @relation(fields: [playerId], references: [id])
  
  @@unique([gameId, playerId])
  @@index([gameId, teamId])
  @@index([gameId, position])
}

model Team {
  id                String   @id @default(cuid())
  name              String
  abbreviation      String   @unique
  conference        String?
  division          String?
  level             Level
  logo              String?  // URL to team logo
  logoLocalPath     String?  // Local path for cached logo
  primaryColor      String?  // Primary team color (hex)
  secondaryColor    String?  // Secondary team color (hex)
  accentColor       String?  // Accent color (hex)
  colors            Json?    // Extended color palette
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  users             User[]
  players           Player[]
  games             Game[]
  opponentGames     Game[]   @relation("Opponent")
  gameRosters       GameRoster[]
  liveGames         LiveGame[]
  opponentLiveGames LiveGame[] @relation("OpponentLiveGames")
  reports           Report[]
  tendencies        TendencyAnalysis[]
  
  // Position-specific relations
  positionConfigurations PositionConfiguration[]
  
  // Grading relations
  playGrades        PlayGrade[]
  
  @@index([level, conference])
}

enum Level {
  NFL
  COLLEGE
  HIGH_SCHOOL
}

model Season {
  id          String @id @default(cuid())
  year        Int    @unique
  isActive    Boolean @default(false)
  startDate   DateTime
  endDate     DateTime?
  
  games       Game[]
  players     Player[]
  tendencies  TendencyAnalysis[]
  
  @@index([year, isActive])
}

model Game {
  id          String   @id @default(cuid())
  date        DateTime
  week        Int
  seasonId    String
  teamId      String
  opponentId  String
  homeAway    HomeAway
  score       Json?    // {team: 24, opponent: 17, quarter: 4}
  weather     Json?    // Temperature, wind, conditions
  attendance  Int?
  
  season      Season   @relation(fields: [seasonId], references: [id])
  team        Team     @relation(fields: [teamId], references: [id])
  opponent    Team     @relation("Opponent", fields: [opponentId], references: [id])
  
  plays       Play[]
  playGrades  PlayGrade[]
  gameRosters GameRoster[]
  tendencies  TendencyAnalysis[]
  externalGames ExternalGame[]
  
  @@unique([teamId, opponentId, date])
  @@index([seasonId, week])
  @@index([date])
  @@index([teamId, date])
}

enum HomeAway {
  HOME
  AWAY
  NEUTRAL
}

model Play {
  id              String   @id @default(cuid())
  gameId          String
  quarter         Int
  time            String
  down            Int
  distance        Int
  playType        PlayType
  formation       String?
  personnel       String?
  playAction      String?
  result          Json
  isRedZone       Boolean  @default(false)
  isGoalToGo      Boolean  @default(false)
  isThirdDown     Boolean  @default(false)
  isFourthDown    Boolean  @default(false)
  playersInvolved Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  game      Game   @relation(fields: [gameId], references: [id])
  playGrade PlayGrade?
  externalPlay ExternalPlay?
  
  // Position-specific relations
  positionPlayGrades PositionPlayGrade[]
  positionGrades PlayPositionGrade[]
  
  @@index([down, distance])
  @@index([isRedZone, isGoalToGo])
  @@index([playType])
}

enum PlayType {
  RUSH
  PASS
  PUNT
  FIELD_GOAL
  KICKOFF
  EXTRA_POINT
  SAFETY
  PENALTY
  TIMEOUT
  CHALLENGE
}

model PlayGrade {
  id          String   @id @default(cuid())
  playId      String   @unique
  teamId      String
  gameId      String
  userId      String
  execution   Int?
  technique   Int?
  assignment  Int?
  impact      Int?
  blitzType   String?
  coverage    String?
  pressure    Boolean?
  turnover    Boolean?
  notes       String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  play   Play   @relation(fields: [playId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])
  game   Game   @relation(fields: [gameId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  
  // Position-specific relations
  positionPlayGrades PositionPlayGrade[]
  positionGrades PlayPositionGrade[]
  
  @@index([teamId, gameId])
  @@index([execution, technique, assignment, impact])
  @@index([blitzType, coverage])
}

model PlayPositionGrade {
  id              String @id @default(cuid())
  playId          String
  playGradeId     String
  positionGroupId String
  specificPosition String  // "LT", "LG", "C", "RG", "RT", "TE6", "OL6", etc.
  playerId        String?  // Reference to Player
  playerNumber    String?  // Jersey number (for backup/fallback)
  playerName      String?  // Optional player name (for backup/fallback)
  
  // Dynamic grading data based on position configuration
  grades          Json     // All the grade values
  tags            String[] // Applied tags
  notes           String?  // Position-specific notes
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  play            Play @relation(fields: [playId], references: [id])
  playGrade       PlayGrade @relation(fields: [playGradeId], references: [id])
  positionGroup   PositionGroup @relation(fields: [positionGroupId], references: [id])
  player          Player? @relation(fields: [playerId], references: [id])
  
  @@unique([playGradeId, positionGroupId, specificPosition])
  @@index([playId, specificPosition])
  @@index([playerId])
}

model Formation {
  id          String @id @default(cuid())
  name        String @unique
  category    String // "I-Formation", "Shotgun", "Pistol", "Spread"
  personnel   String // "11", "12", "21", "22"
  description String?
  diagram     Json?  // SVG path data or coordinates
  isOffensive Boolean @default(true)
  
  @@index([category, personnel])
}

model Report {
  id          String     @id @default(cuid())
  title       String
  type        ReportType
  gameIds     String[]   // Games included in report
  filters     Json       // Filters used
  data        Json       // Generated report data
  userId      String
  teamId      String
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  user        User       @relation(fields: [userId], references: [id])
  team        Team       @relation(fields: [teamId], references: [id])
  
  @@index([teamId, type])
  @@index([createdAt])
}

enum ReportType {
  GAME_SUMMARY
  TENDENCY_ANALYSIS
  PLAYER_GRADES
  SCOUTING_REPORT
  COMPARATIVE_ANALYSIS
  FORMATION_ANALYSIS
  DOWN_DISTANCE_ANALYSIS
  RED_ZONE_ANALYSIS
}

// New models for enhanced analytics
model TendencyAnalysis {
  id                    String   @id @default(cuid())
  teamId                String
  gameId                String?
  seasonId              String?
  downDistanceTendencies Json?
  formationTendencies   Json?
  personnelTendencies   Json?
  blitzTendencies       Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  team   Team   @relation(fields: [teamId], references: [id])
  game   Game?  @relation(fields: [gameId], references: [id])
  season Season? @relation(fields: [seasonId], references: [id])

  @@index([teamId, gameId])
  @@index([teamId, seasonId])
}

// Position-specific analysis models
model PositionGroup {
  id          String @id @default(cuid())
  name        String @unique
  displayName String
  category    String
  positions   String[]
  isActive    Boolean @default(true)
  
  configurations PositionConfiguration[]
  playGrades     PositionPlayGrade[]
  positionGrades PlayPositionGrade[]
  
  @@index([category, isActive])
}

model PositionConfiguration {
  id              String @id @default(cuid())
  positionGroupId String
  teamId          String
  userId          String
  gradingFields   Json
  metricFields    Json
  tags            String[]
  settings        Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  positionGroup   PositionGroup @relation(fields: [positionGroupId], references: [id])
  team            Team @relation(fields: [teamId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  
  @@unique([positionGroupId, teamId])
  @@index([teamId, positionGroupId])
}

model PositionPlayGrade {
  id              String @id @default(cuid())
  playId          String
  playGradeId     String
  positionGroupId String
  playerNumber    String?
  position        String
  grades          Json
  metrics         Json
  notes           String?
  tags            String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  play            Play @relation(fields: [playId], references: [id])
  playGrade       PlayGrade @relation(fields: [playGradeId], references: [id])
  positionGroup   PositionGroup @relation(fields: [positionGroupId], references: [id])
  
  @@unique([playGradeId, positionGroupId, playerNumber])
  @@index([playId, positionGroupId])
  @@index([positionGroupId, createdAt])
}

// Live game grading models
model LiveGame {
  id          String @id @default(cuid())
  teamId      String
  opponentId  String
  gameDate    DateTime
  status      GameStatus @default(PRE_GAME)
  currentQuarter Int @default(1)
  currentTime    String @default("15:00")
  teamScore      Int @default(0)
  opponentScore  Int @default(0)
  
  // Live game settings
  gradingMode    GradingMode @default(QUICK)
  activeGraders  String[]  // User IDs of active graders
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  team        Team @relation(fields: [teamId], references: [id])
  opponent    Team @relation("OpponentLiveGames", fields: [opponentId], references: [id])
  livePlay    LivePlay[]
  
  @@unique([teamId, gameDate])
}

enum GameStatus {
  PRE_GAME
  QUARTER_1
  QUARTER_2
  HALFTIME
  QUARTER_3
  QUARTER_4
  OVERTIME
  FINAL
}

enum GradingMode {
  QUICK      // Fast +2 to -2 only
  DETAILED   // Full grading fields
  TAGS_ONLY  // Just tags and notes
}

model LivePlay {
  id              String @id @default(cuid())
  liveGameId      String
  playNumber      Int
  quarter         Int
  time            String
  down            Int?
  distance        Int?
  yardLine        Int?
  playType        String?
  outcome         String?
  
  // Quick input fields
  isGoodPlay      Boolean?
  isBadPlay       Boolean?
  quickGrade      Int? // -2 to +2
  tags            String[]
  notes           String?
  
  // Grader info
  graderId        String
  gradedAt        DateTime @default(now())
  
  // Position-specific grades (JSON for flexibility)
  positionGrades  Json?
  
  liveGame        LiveGame @relation(fields: [liveGameId], references: [id])
  grader          User @relation(fields: [graderId], references: [id])
  
  @@unique([liveGameId, playNumber])
  @@index([liveGameId, quarter])
}

// External data integration models
model ExternalGame {
  id              String @id @default(cuid())
  externalId      String @unique
  source          String // "kaggle_ncaa", "espn", "sports_reference", "kaggle_nfl", "snowflake_nfl"
  season          Int
  week            Int
  homeTeam        String
  awayTeam        String
  homeScore       Int?
  awayScore       Int?
  date            DateTime
  venue           String?
  rawData         Json     // Store original data
  
  mappedGameId    String?
  mappedGame      Game? @relation(fields: [mappedGameId], references: [id])
  externalPlays   ExternalPlay[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([source, season, week])
  @@index([homeTeam, awayTeam, date])
  @@index([source, externalId])
}

model ExternalPlay {
  id              String @id @default(cuid())
  externalGameId  String
  externalId      String
  source          String
  quarter         Int
  time            String
  down            Int?
  distance        Int?
  yardLine        Int?
  playType        String
  description     String
  offense         String
  defense         String
  rawData         Json
  
  mappedPlayId    String? @unique
  mappedPlay      Play? @relation(fields: [mappedPlayId], references: [id])
  externalGame    ExternalGame @relation(fields: [externalGameId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([source, externalId])
  @@index([externalGameId, quarter, time])
  @@index([playType, down, distance])
}
